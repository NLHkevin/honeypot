#include <iostream>
#include <fstream>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <chrono>
#include <thread>
#include <random>

void logCredentials(const char* username, const char* password) {
    std::ofstream logFile("honeypot_log.txt", std::ios::app);
    if (logFile.is_open()) {
        std::time_t now = std::time(nullptr);
        logFile << "Timestamp: " << std::asctime(std::localtime(&now));
        logFile << "Username: " << username << std::endl;
        logFile << "Password: " << password << std::endl;
        logFile.close();
    } else {
        std::cerr << "Failed to open log file." << std::endl;
    }
}

bool isStrongPassword(const char* password) {
    // Minimum password length requirement
    if (std::strlen(password) < 8) {
        return false;
    }

    bool hasUppercase = false;
    bool hasLowercase = false;
    bool hasSpecialChar = false;

    // Check each character of the password
    for (const char* p = password; *p != '\0'; ++p) {
        // Check for uppercase letters
        if (std::isupper(*p)) {
            hasUppercase = true;
        }
        // Check for lowercase letters
        else if (std::islower(*p)) {
            hasLowercase = true;
        }
        // Check for special characters
        else if (!std::isalnum(*p)) {
            hasSpecialChar = true;
        }
    }

    // Verify if all the required criteria are met
    return hasUppercase && hasLowercase && hasSpecialChar;
}

void simulateDelay() {
    // Simulate a delay before displaying the login result
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1000, 3000);
    int delayTime = dis(gen);
    std::cout << "Please wait while we verify your credentials..." << std::endl;
    std::cout << "Simulating delay of " << delayTime << " milliseconds..." << std::endl;
    std::cout << std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(delayTime));
}

void analyzeAttack(const char* username, const char* password) {
    // Perform analysis on the logged credentials
    std::cout << "Analyzing the attack..." << std::endl;
    std::cout << "Username: " << username << std::endl;
    std::cout << "Password: " << password << std::endl;
    std::cout << std::endl;
    // Add your own analysis logic here
}

int main() {
    // Create a dummy login page for the honeypot
    char username[20];
    char password[20];

    // Prompt the attacker to enter a username
    std::cout << "Enter your username: ";
    std::cin.getline(username, sizeof(username));

    // Prompt the attacker to enter a password
    std::cout << "Enter your password: ";
    std::cin.getline(password, sizeof(password));

    // Log the entered credentials to a file
    logCredentials(username, password);

    // Simulate delay to make the login process appear more realistic
    simulateDelay();

    // Analyze the logged credentials to gain insights
    analyzeAttack(username, password);

    // Simulate different login scenarios based on credentials
    if (std::strcmp(username, "admin") == 0 && std::strcmp(password, "password") == 0) {
        std::cout << "Logging in as admin..." << std::endl;
        // Additional actions for successful login as admin
    } else if (!isStrongPassword(password)) {
        std::cout << "Invalid username or weak password. Login failed." << std::endl;
        // Additional actions for weak password
    } else {
        std::cout << "Invalid username or password. Login failed." << std::endl;
        // Additional actions for failed login
    }

    return 0;
}
