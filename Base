#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <openssl/sha.h>
#include <spdlog/spdlog.h>
#include <random>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <vector>

std::vector<std::time_t> loginAttempts;

bool maybestrongpsw(const std::string& password) {
    if (password.length() < 8) {
        return false;
    }

    bool hasUppercase = false;
    for (char ch : password) {
        if (std::isupper(ch)) {
            hasUppercase = true;
            break;
        }
    }

    if (!hasUppercase) {
        return false;
    }

    bool has1Digit = false;
    for (char ch : password) {
        if (std::isdigit(ch)) {
            has1Digit = true;
            break;
        }
    }

    if (!has1Digit) {
        return false;
    }

    return true;
}

std::string generateHoneytoken() {
    std::string honeytoken = "honeytoken";

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1000, 9999);
    int suffix = dis(gen);

    honeytoken += std::to_string(suffix);
    return honeytoken;
}

bool verifyCaptcha() {
    std::string captcha;
    std::cout << "Enter the captcha: ";
    std::cin >> captcha;

    std::string expectedCaptcha = "ABC123";
    return captcha == expectedCaptcha;
}

bool checkRateLimit(const std::string& ipAddress, int maxAttempts, int timeWindow) {
    std::time_t currentTime = std::time(nullptr);
    std::time_t timeWindowStart = currentTime - timeWindow;

    int count = 0;
    for (const std::time_t& attemptTime : loginAttempts) {
        if (attemptTime >= timeWindowStart && attemptTime <= currentTime && attemptTime != 0) {
            count++;
        }
    }

    return count < maxAttempts;
}

void analyzeAttack(const std::vector<std::string>& loginAttempts) {
    spdlog::info("Analyzing login attempts...");
    for (const std::string& attempt : loginAttempts) {
        spdlog::info("Login attempt: {}", attempt);
    }
}

int main() {
    spdlog::set_level(spdlog::level::info);
    spdlog::info("Honeypot program started.");

    std::string logFile = "honeypot_log.txt";
    std::ofstream logStream(logFile, std::ios::app);
    if (!logStream.is_open()) {
        spdlog::error("Failed to open log file: {}", logFile);
        return 1;
    }

    std::time_t now = std::time(nullptr);
    std::tm* timeinfo = std::localtime(&now);
    char timeBuffer[80];
    std::strftime(timeBuffer, sizeof(timeBuffer), "%Y-%m-%d %H:%M:%S", timeinfo);

    std::string username;
    std::cout << "Enter username: ";
    std::cin >> username;

    std::string honeytoken = generateHoneytoken();

    std::string password;
    std::cout << "Enter password: ";
    std::cin >> password;

    if (!verifyCaptcha()) {
        spdlog::error("Captcha verification failed. Possible bot attack.");
        logStream.close();
        return 1;
    }

    unsigned char hash[SHA512_DIGEST_LENGTH];
    SHA512_CTX sha512;
    SHA512_Init(&sha512);
    SHA512_Update(&sha512, password.c_str(), password.length());
    SHA512_Final(hash, &sha512);

    std::stringstream ss;
    for (int i = 0; i < SHA512_DIGEST_LENGTH; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
    }
    std::string passwordHash = ss.str();

    loginAttempts.push_back(std::time(nullptr));

    logStream << "Time: " << timeBuffer << ", Username: " << username << ", Password Hash: " << passwordHash << std::endl;

    logStream.close();

    return 0;
}
